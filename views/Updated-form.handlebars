

























<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle delete button click
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', () => {
        const id = button.dataset.postId;
        document.getElementById('deleteBlogId').value = id;

        // Show the delete modal
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteBlogModal'));
        deleteModal.show();
      });
    });


    // Pre-fill the edit modal when the edit button is clicked
document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', function () {
        const id = this.getAttribute('data-id');
        const title = this.getAttribute('data-title');
        const description = this.getAttribute('data-description');
        const image = this.getAttribute('data-image');
        const contents = this.getAttribute('data-contents');
        const en = this.getAttribute('data-en');

                // Set form action to include the postId
        const editForm = document.getElementById('editBlogForm');
        editForm.setAttribute('action', `/api/edit-blog/${id}`);

        // Debugging output
        console.log('ID:', id);
        console.log('Title:', title);
        console.log('Description:', description);
        console.log('Image:', image);
        console.log('Contents:', contents);
        console.log('En:', en);

        // Populate the form fields
        document.getElementById('editBlogId').value = id; // Set ID
        document.getElementById('editTitle').value = title; // Set Title
        document.getElementById('editDescription').value = description; // Set Description
        document.getElementById('editContents').value = contents ; // Set Contents
        document.getElementById('editEn').value = en ; // Set En

                const imagePreview = document.getElementById('editImagePreview');
        if (image) {
          imagePreview.src = image; // Show the existing image
          imagePreview.style.display = 'block';
        } 


        // Show the edit modal
        const editModal = new bootstrap.Modal(document.getElementById('editBlogModal'));
        editModal.show();
      });

    });
});





  // Initialize TinyMCE for the edit modal
tinymce.init({
    selector: '#editContents',
    height: 500,
    menubar: 'file edit view insert format tools table help',
    plugins: [
         'advlist', 'advcode', 'autolink', 'lists', 'link', 'image', 
    'charmap', 'preview', 'anchor', 'searchreplace', 'visualblocks', 
    'fullscreen', 'insertdatetime', 'media', 'table', 'code', 
    'help', 'wordcount'
    ],
    toolbar: 'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | template code | help',
    content_style: "body { font-family:Arial, Helvetica, sans-serif; font-size:14px }",
    fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt', // Custom font sizes
});

</script>






    // Pre-fill the edit modal when the edit button is clicked
    document.querySelectorAll('.edit-btn').forEach(button => {
      button.addEventListener('click', function () {
        const id = this.getAttribute('data-id');
        const title = this.getAttribute('data-title');
        const description = this.getAttribute('data-description');
        const image = this.getAttribute('data-image');
        const contents = this.getAttribute('data-contents');
        const en = this.getAttribute('data-en');

        // Debugging output
        console.log('ID:', id);
        console.log('Title:', title);
        console.log('Description:', description);
        console.log('Image:', image);
        console.log('Contents:', contents);
        console.log('En:', en);

        
                // Set form action to include the postId
        const editForm = document.getElementById('editBlogForm');
        editForm.setAttribute('action', `/api/edit-blog/${id}`);

        // Populate the fields
        document.getElementById('editBlogId').value = id;
        document.getElementById('editTitle').value = title.trim();
        document.getElementById('editDescription').value = description.trim();
        document.getElementById('editEn').value = en;

        // Handle image field (optional preview logic)
        const imagePreview = document.getElementById('editImagePreview');
        if (image) {
          imagePreview.src = image; // Show the existing image
          imagePreview.style.display = 'block';
        } else {
          imagePreview.style.display = 'none'; // Hide preview if no image
        }

        // Handle TinyMCE content
        const contentField = document.getElementById('editContents');
        contentField.value = contents; // Set the raw content for fallback
        if (tinymce.get('editContents')) {
          tinymce.get('editContents').setContent(contents); // Set content in TinyMCE
        }

        // Show the edit modal
        const editModal = new bootstrap.Modal(document.getElementById('editBlogModal'));
        editModal.show();
      });
   });



